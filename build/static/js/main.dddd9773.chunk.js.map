{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObj","post","id","put","Notification","message","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","changedNote","returnedNote","catch","error","setTimeout","n","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,gBAAkB,YACjD,OACI,wBAAKC,UAAU,QACVJ,EAAKK,QACN,4BAASC,QAASL,GAAlB,IAAuCC,K,gBCWpC,EAfA,WAEb,OADgBK,IAAMC,IAHR,cAICC,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCJ9BK,EATM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EAAyB,KAEzB,yBAAKb,UAAU,SACX,2BAAIa,KCiFDC,EAjFH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,MAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAgBrBC,qBARa,WACXC,IAEGrB,MAAK,SAAAsB,GACJT,EAASS,QAIC,IAEhB,IAqCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAjC,GAAI,OAAIA,EAAKG,aAQ9B,OACE,6BACE,kBAAC,EAAD,CAAcc,QAASU,IACvB,qCACA,4BAAQrB,QAAS,kBAAMoB,GAAYD,KAAWA,EAAU,YAAc,YACtE,4BACGO,EAAYE,KAAI,SAAAlC,GAAI,OAAI,kBAAC,EAAD,CAAMmC,IAAKnC,EAAKc,GAAId,KAAMA,EAAMC,iBAAkB,kBArCtD,SAAAa,GACzB,IAAMd,EAAOqB,EAAMe,MAAK,SAAApC,GAAI,OAAIA,EAAKc,KAAOA,KACtCuB,EAAW,2BAAQrC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD2B,EACUhB,EAAIuB,GACX5B,MAAK,SAAA6B,GACJhB,EAASD,EAAMa,KAAI,SAAAlC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAOsC,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJ5B,EAAKK,QADD,sCAGfoC,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAS,GAAC,OAAIA,EAAE5B,KAAOA,SAqB6C6B,CAAmB3C,EAAKc,WAE3G,0BAAM8B,SAvDM,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjB1C,QAASkB,EACTyB,MAAM,IAAIC,MAAOC,cACjB/C,UAAWgD,KAAKC,SAAW,IAE7BtB,EACUiB,GACPtC,MAAK,SAAA6B,GACJhB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,SA6CX,2BAAO8B,MAAO/B,EAASgC,SAfJ,SAACV,GACxBrB,EAAWqB,EAAMW,OAAOF,UAepB,4BAAQG,KAAK,UAAb,W,MC5ERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.dddd9773.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'Not Important' : 'Important'\n    return (\n        < li className='note'>\n            {note.content}\n            < button onClick={toggleImportance} > {label}</button>\n        </li >\n    )\n}\n\n\nexport default Note\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObj) => {\n  const request = axios.post(baseUrl, newObj);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObj) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObj);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) return null\n    else return (\n        <div className='error'>\n            <p>{message}</p>\n        </div>\n    )\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n\n\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n\n  useEffect(hook, [])\n\n  const addnote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(note => note.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n\n\n  return (\n    <div>\n      <Notification message={errorMessage} />\n      <h1>Notes</h1>\n      <button onClick={() => setShowAll(!showAll)}>{showAll ? 'important' : 'show all'}</button>\n      <ul>\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />)}\n      </ul>\n      <form onSubmit={addnote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}